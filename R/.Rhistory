?graphNELK
?graphNEL
?graph
library (graph)
?graphNEL
?graph
new ('graphNEL')
help('graph')
help.start ()
new ('graphNEL', nodes=NA, edgemode='directed')
new ('graphNEL', nodes=NULL, edgemode='directed')
new ('graphNEL', nodes=character(), edgemode='directed')
new ('graphNEL', nodes=character(), edgeL=list(character()), edgemode='directed')
new ('graphNEL', nodes=character(), edgeL=list(), edgemode='directed')
(4 * 1644) + 1200
g = new ('graphNEL', nodes=character(), edgeL=list(), edgemode='directed')
validGraph (g)
graphNEL ()
graphNEL()
validGraph (graphNEL())
testConstructorFunction ()
testConstructor
testConstructorFunction ()
library (Runit)
library (RUnit)
testConstructorFunction ()
    target <- new("graphNEL")
    checkIdentical(target, graphNEL())

graphNEL()
print (graphNEL())
print (new ('graphNEL'))
testConstructorFunction ()
edgeL2
target
validGraph (target)
edges (target)
sort (edges (target))
edges (target)
edgeL2
names (edgeL2)
sort (nodes) == sort (names (edgeL2))
length (nodes) == length (names (edgeL2))
run.tests ()
traceback ()
run.tests ()
run.tests ()
run.tests
test_coerce_matrix_round_trip ()
run.tests ()
run.tests ()
run.tests ()
edgeL2
edgeL
edgeL2 <- list(B = "A", C = c("A", "B"), D = "C")
edgeL2
Q
testConstructorFunction 
testConstructorFunction  ()
traceback ()
testConstructorFunction  ()
edgeL
nodes
n
n
n
n
n
n
n
n
edgeL2
n
n
validGraph
edgeL2
testConstructorFunction ()
edgeL2
c
graphNEL (nodes, edgeL2)
graphNEL (nodes, edgeL2)
graphNEL (nodes, edgeL2)
run.tests ()
c
c
run.tests ()
edgeL2
nodes
graphNEL(nodes, edgeL2)
Q
source ('../inst/unitTests/graphNEL_test.R')
testConstructorFunction ()
c
testConstructorFunction ()
nodes
edgeL2
graphNEL (nodes=nodes, edgeL=edgeL2)
checkIdentical(target, graphNEL(nodes, edgeL, "undirected"))
Q
source ('../inst/unitTests/graphNEL_test.R'); run.tests ()
c
source ('../inst/unitTests/graphNEL_test.R'); run.tests ()
source ('../inst/unitTests/graphAM_test.R'); run.tests ()
adjMatrix=matrix(integer(), 0, 0)
matrix(integer(), 0, 0)
run.tests ()
traceback ()
graphAM()
graphAM()
graphAM()
graphAM
new('graphAM')
graphAM()
run.tests ()
traceback ()
run.tests ()
traceback ()
run.tests ()
run.tests ()
graphAM ()
print (graphAM ())
print (graphAM)
print (graphAM ())
run.tests ()
run.tests
source ('../inst/unitTests/graphAM_test.R'); run.tests ()
length (NA)
source ('../inst/unitTests/graphAM_test.R'); run.tests ()
simpleAdjMat ()
m = simpleAdjMat ()
graphAM(m, 'directed', values=list(weight=1))
print (graphAM(m, 'directed', values=list(weight=1)))
x =  (graphAM(m, 'directed', values=list(weight=1)))
edgeData (x)
 edgedata (graphAM(m, 'directed', values=list(weight=1, summer=0)))
 edgeData (graphAM(m, 'directed', values=list(weight=1, summer=0)))
 edgeData (graphAM(m, 'directed', values=list(whipple=1)))
 edgeData (graphAM(m, 'directed', values=list(whipple=45)))
x = (graphAM(m, 'directed', values=list(whipple=45)))
edgeDataDefaults (x)
edgeData (x, 'd', 'c', 'whipple')
edgeData (x, 'd', 'a', 'whipple')
m
edgeData (x, 'a', 'b', 'whipple')
m * 2
m * 12.5
edgeData (graphAM(m*12.5, 'directed', values=list(whipple=45)))
edgeData (graphAM(m*-12.5, 'directed', values=list(whipple=45)))
edgeData (graphAM(m*0.0001, 'directed', values=list(whipple=45)))
q ('no')
